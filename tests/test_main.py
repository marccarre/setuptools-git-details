import re
from pathlib import Path

import pytest

from setuptools_git_details.main import Configuration, main


def test_config() -> None:
    project_toml_path = Path(__file__).parent / "sample_pyproject.toml"
    config = Configuration.from_file(project_toml_path)
    assert config == Configuration(file=Path("tests/_git.py"))


def test_invalid_config_no_tool_section() -> None:
    project_toml_path = Path(__file__).parent / "invalid_pyproject_no_tool_section.toml"
    with pytest.raises(ValueError, match="Invalid pyproject.toml: no tool section"):
        Configuration.from_file(project_toml_path)


def test_invalid_config_no_tool_sgd_section() -> None:
    project_toml_path = (
        Path(__file__).parent / "invalid_pyproject_no_tool_sgd_section.toml"
    )
    with pytest.raises(
        ValueError,
        match="Invalid pyproject.toml: no tool.setuptools_git_details section",
    ):
        Configuration.from_file(project_toml_path)


def test_invalid_config_no_file_field() -> None:
    project_toml_path = Path(__file__).parent / "invalid_pyproject_no_file_field.toml"
    with pytest.raises(
        ValueError,
        match="Invalid tool.setuptools_git_details section: file key-value pair is missing",
    ):
        Configuration.from_file(project_toml_path)


def test_main() -> None:
    project_toml_path = Path(__file__).parent / "sample_pyproject.toml"
    main(project_toml_path)
    with open("tests/_git.py", "r") as f:
        lines = f.readlines()
    assert len(lines) == 15
    assert lines[0] == "# This file was generated by setuptools-git-details.\n"
    assert lines[1] == "# Do NOT change. Do NOT track in version control.\n"
    assert lines[2] == "\n"
    assert lines[3] == "from typing import Dict\n"
    assert lines[4] == "\n"
    assert lines[5] == "git: Dict[str, str | bool] = {\n"
    assert lines[6] == '    "name": "setuptools-git-details",\n'
    assert re.match(r'^    "revision": "[a-fA-F0-9]{40}(?:-dirty)?",$', lines[7])
    assert re.match(r'^    "branch": "(?:.*?)",$', lines[8])
    assert re.match(r'^    "tag": "(?:.*?)",$', lines[9])
    assert (
        lines[10]
        == '    "url": "https///github.com/marccarre/setuptools-git-details",\n'
    )
    assert (
        lines[11]
        == '    "git": "git@github.com:marccarre/setuptools-git-details.git",\n'
    )
    assert re.match(r'^    "is_dirty": (?:True|False),$', lines[12])
    assert lines[13] == "}\n"
    assert lines[14] == "__git__ = git\n"
